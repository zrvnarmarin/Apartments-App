// pogledaj za data fetching
get i post request i firebase: 
///////////////////////////////////////////////////////////////////


import React, { useState, useEffect, useCallback } from "react";
import axios from 'axios';

const AddMovie = ({ onAddMovie }) => {
  const [title, setTitle] = useState('')
  const [openingText, setOpeningText] = useState('')
  const [releaseDate, setReleaseDate] = useState('')

  const submitHandler = e => {
    e.preventDefault()

    const newMovie = {
      id: crypto.randomUUID(),
      title: title,
      openingText: openingText,
      releaseDate: releaseDate
    }

    onAddMovie(newMovie)
  }

  return (
    <form className="border-2 border-black flex flex-col gap-2 mb-10" onSubmit={submitHandler}>
      <input placeholder="title" className="border-black border-2 m-2" type="text" onChange={(e) => setTitle(e.target.value)} />
      <input placeholder="opening Text" className="border-black border-2 m-2" type="text" onChange={(e) => setOpeningText(e.target.value)} />
      <input placeholder="release Date" className="border-black border-2 m-2" type="text" onChange={(e) => setReleaseDate(e.target.value)} />
      <button className="bg-green-300 rounded px-5 py-2 ">Submit</button>
    </form>
  )
}

const App = () => {
  const [movies, setMovies] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const addMovieHandler = async (movie) => {
    const response = await axios.post('https://apartments-app-6a66f-default-rtdb.firebaseio.com/movies.json',
    movie).then(response => console.log(response))
  }

  const fetchMovies = useCallback(async () => {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch('https://apartments-app-6a66f-default-rtdb.firebaseio.com/movies.json')
      if (!response.ok) {
        throw new Error('Something went wrong..')
      }
      const data = await response.json()

      const loadedMovies = []
      for (const key in data) {
        loadedMovies.push({
          id: key,
          title: data[key].title,
          openingText: data[key].openingText,
          releaseDate: data[key].releaseDate
        })
      }
      console.log(loadedMovies)

      setMovies(loadedMovies)
      setIsLoading(false)
    } 
    catch (error)  {setError(error.message) }
     
    setIsLoading(false)
  }, [])

  useEffect(() => {
    fetchMovies()
  }, [fetchMovies])

  return (
    <div>
      <button onClick={fetchMovies}>Fetch movies </button>
      <button onClick={addMovieHandler}>Display movie in console</button>
      <AddMovie onAddMovie={addMovieHandler} />
      { isLoading && <p>Loading data...</p> }
      { !isLoading && movies.length === 0 && !error && <p>Found no movies</p>}
      { !isLoading && movies.length > 0 && movies.map(movie => 
        <div className="flex flex-col gap-4 border-2 border-black" key={movie.id}>
          <p>{movie.id}</p>
          <p>{movie.title}</p>
          <p>{movie.openingText}</p>
          <p>{movie.releaseDate}</p>
        </div>
      )}
      { !isLoading && error && <p>{error}</p> }
    </div>
  )
}

export default App;

spinner za loading medjan na: https://loading.io/














////////////////////// UDEMY SECTION 16 - SAMO KOPIRAJ CIJELI KOD U APP FILE ///////////////////
import React, { useState} from "react";
import { useEffect } from "react";
import UseInput from "./hooks/UseInput";

const BasicForm = (props) => {
  return (
    <form className='border-2 border-black p-4 text-2xl bg-green-400 flex flex-col items-center justify-center'>
      <div className='control-group'>
        <div className='form-control'>
          <label htmlFor='name'>First Name</label>
          <input type='text' id='name' />
        </div>
        <div className='form-control'>
          <label htmlFor='name'>Last Name</label>
          <input type='text' id='name' />
        </div>
      </div>
      <div className='form-control'>
        <label htmlFor='name'>E-Mail Address</label>
        <input type='text' id='name' />
      </div>
      <div className='form-actions'>
        <button>Submit</button>
      </div>
    </form>
  );
};

const SimpleInput = (props) => {
  const { 
    value: enteredName, 
    isValid: enteredNameIsValid,
    hasError: nameInputHasError,
    valueChangeHandler: nameChangeHandler,
    inputBlurHandler: nameBlurHandler,
    reset: resetNameInput
  } = UseInput(value => value.trim() !== '')

  const {
    value: enteredEmail,
    isValid: enteredEmailIsValid,
    hasError: emailInputHasError,
    valueChangeHandler: emailChangeHandler,
    inputBlurHandler: emailBlurHandler,
    reset: resetEmailInput
  } = UseInput(value => value.includes('@'))


  let formIsValid = false
  if (enteredNameIsValid && enteredEmailIsValid) formIsValid = true

  const formSubmitHandler = e => {
    e.preventDefault()  

    if (!enteredNameIsValid) {
      return
    }

    resetNameInput()
    resetEmailInput()

    console.log(enteredName)
  }

  return (
    <form onSubmit={formSubmitHandler} className='border-2 border-black p-4 text-2xl bg-green-400 flex flex-col items-center justify-center'>
      <div>
        <label htmlFor='name'>Your Name</label>
        <input 
          value={enteredName} 
          onChange={nameChangeHandler} 
          onBlur={nameBlurHandler}
          type='text' id='name' 
        />
      </div>
      <div>
        <label htmlFor='email'>Your Email</label>
        <input 
          value={enteredEmail} 
          onChange={emailChangeHandler} 
          onBlur={emailBlurHandler}
          type='email' id='email' 
        />
      </div>
      { nameInputHasError && <p>Name must not be empty!</p> }
      { emailInputHasError && <p>Please enter a valid email</p> }
      <div>
        <button disabled={!formIsValid} className="bg-red-400 p-2 rounded-xl">Submit</button>
      </div>
    </form>
  );
};

const App = () => {
  return (
    <div>
      <SimpleInput />
      {/* <BasicForm /> */}
    </div>
  )
}

export default App;